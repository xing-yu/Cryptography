# CSCI 55500
# Assignment 05
# Author: Xing Yu
# Fall 2017

import numpy as np
from random import randint

#<<<<<<<<<<<<<<<<<<<<<<<<<<<< M matrix >>>>>>>>>>>>>>>>>>>>>>>>>>>>
Matrix1 =  [
[' ','*','4','>','H','R','\\','f','o','x'],
['!','+','5','?','I','S',']','g','p','y'],
['\\',',','6','@','J','T','^','h','q','z'],
['#','-','7','A','K','U','_','i','r','{'],
['$','.','8', 'B','L','V','`','j','s','|'],
['%','/','9','C','M','W','a','k','t','}'],
['&','0',':','D','N','X','b','l','u','~'],
["'",'1',';','E','O','Y','c','m','v',' '],
['(','2','<','F','P','Z','d','n','w',' '],
[')','3','=','G','Q','[','e','\n',' ',' ']
]

Matrix2 = [
[' ', '!', '"', '#', '$', '%', '&', "'", '(', ')'],
['*', '+', ',', '-', '.', '/', '0', '1', '2', '3'],
['4', '5', '6', '7', '8', '9', ':', ';', '<', '='],
['>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G'],
['H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q'],
['R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '['],
['\\', ']', '^', '_', "`", 'a', 'b', 'c', 'd', 'e'],
['f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'],
['p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y'],
['z', '{', '|', '}', '~', ' ', ' ', '\n\r',' ', ' ']
]
#<<<<<<<<<<<<<<<<<<< extended euclidean algorithm >>>>>>>>>>>>>>>>>
def extendEu(a, b):
    a0 = a
    b0 = b
    t0 = 0
    t = 1
    s0 = 1
    s = 0
    q = a0//b0
    r = a0 - q*b0
    while r > 0:
        temp = t0 - q*t
        t0 = t
        t = temp
        temp = s0 - q*s
        s0 = s
        s = temp
        a0 = b0
        b0 = r
        q = a0//b0
        r = a0 - q*b0
    r = b0
    return [r,s,t]

#<<<<<<<<<<<<<<<<<<<<<<<<< Find M and W >>>>>>>>>>>>>>>>>>>>>>>>>
M_hint = 2036764117802210446778721319780021001
W_hint = 127552671440279916013001
guess = 1000000

'''
for i in range(guess):
    result = pow(5, M_hint+i, M_hint+i+1)
    if  result == 1:
        print(M_hint+i+1)
        break

for i in range(guess):
    result = pow(5, W_hint+i, W_hint+i+1)
    if  result == 1:
        print(W_hint+i+1)
        break
'''
M = 2036764117802210446778721319780021357
W = 127552671440279916013021

#print(extendEu(M, W))

W_inv = 717820533383415790905237126080986020

#print((W*W_inv)%M)
#<<<<<<<<<<<<<<<<<<<<<<<<<< KNAPSACK >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
B = [
7379441564850969401451185884533,
56378280776603722877755282,
112884114224647725671523585,
60452387844955357941794678553967454,
1658184728723638908169273,
30226193922350126299457059360970706,
1627613290730052207554796267157973143,
1801681484093953813683921625,
3689721101307163301425382974819,
59035535069861184017207807336684,
450516035527068663357990172,
3571474800327837648364588,
472284279921126114936262878628367,
1844860359324574490292817467878,
944568559714699558432245841243713,
14413069214737309669723333937,
483619102758622442162835189103635464,
900904518382697046799967323,
3778274240261877619572062441118083,
28061587716861581522864620,
1889137120194715145506171178565552,
1218462463657766415659430934619911908,
236142140151892064628551313333715,
15113096961302615821168809596498374,
800321619026644769080281098919604918,
1832188704265876221823878233636971208,
29517767152272577687764155629279,
461215026054807902433246360459,
241809551379183668409977314635804711,
7206853489047255534651699521,
225002912420653771846969044,
115303660849198395398374580349,
892868700081959412091147,
1934476411034489768651340756414541856,
57651639095592037279313270643,
922430307214958685426324746960,
13903241186990510845419289,
120904775689272952526387957527869803,
230607704356411111636497199761,
28825883324131738779614641832,
14758884022570638884861783860213,
7270502272095955212742197,
3602980310173586787619804187,
400160809513705042554461389207841522,
118071070267275039474695530686389,
967238205517244884325670378207270928,
7556548480778860582024684714262208
]

A_pi = []
for block in B:
    A_pi.append((block*W_inv)%M)

#for a in A_pi:
#    print(a)

A = []
for block in B:
    A.append((block*W_inv)%M)

A.sort()

#for a in A:
#    print(a)

pi = []

for a in A:
    pi.append(A_pi.index(a))

#print(pi)

A = np.asarray(A, dtype = int)
#print(A)
#<<<<<<<<<<<<<<<<<<<<<<<<<< decryption >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
cipher = [
6327819136265758976293387001688200565,
2270322427702566814490499440446842385,
7119660250384655947868434883198035547,
4989003123096096429827434963224859970,
6640151637565832477463881146940561077,
5329937389670737674812922486820665049,
813475120376661665849059487980941920,
5948522154208029499476152268333682013,
5780199176383104450637191134542553639,
2469354301634637197452562993343872489,
3117777099662051755388565313225243929,
4463787106711067947420235376650247733,
4970752407698994382680492341260800850,
1203601507837965756897153659981198968,
6327819136265758976293387001688200565,
930601334568638181164696959250187294,
7203687399061672519758129158214503645,
7049814641006210787004679711858471342,
1954789667745424420193192886594424061,
5169488476745811188323570940241711096,
6330605322713873870565613208293719087,
5521397280182444590238550956235340745,
8541743752483560918226252635304773132,
6565947704478549873313171155844464227,
2563716746379973761986766910798607469,
3317600245867030293825199818571238462,
3361640043697235229217143438622693244,
6565947704478549873313171155844464227,
3052473233393269029354237106994773054,
6101056878086807800742400423138586239,
1812478076789129746372383629732221728,
2984076390303259242700562860483615641,
5071482396237529324094129696199258388,
6551123171632756452147225169312628907,
8347190625866403441144333688282923776,
5615862141215184514088224744880166625,
6861385050973840864753237669319864648,
2016605081971555308766621181056698455,
5385324838752575692517126841785891324,
2727578141823391992942213830133387567,
79391030450234054811771963541351079,
7554087611679383906334684763349249054,
4516791338474313365995460257937466624,
5558264770617575517480971168399718394,
7119660250384655947868434883198035547,
3388309273477745647187415663757192800,
4297320189168244547396530898266872089,
7158669891623772567596682329194414861,
1872818734743984319681466786528218182,
4993377037466687196749039247728477829,
3932832469749085759825122357288346506,
8213662167473438871310884632050112732,
7585165285526286898358620654236543928,
6901336321461539228764587378643558098,
5103345376967497366681638171064605012,
5260988247059865952926538281526425200,
4716801515959904509761145653469569561,
6640151637565832477463881146940561077,
4355128366619393935672402473386815383,
4281839149456053530351124107585948943,
4538353671911238252181613033949046472,
5310061486501613933336845160982392545,
6102732791141689224451286336870773165,
5101988693416509683614793078834752349
]

plain = ''
for block in cipher:
    s = (W_inv*block)%M

    # solve superincreasing problem
    r = np.zeros(47, dtype = int)
    i = 46
    while(i >= 0):
        if s >= A[i]:
            r[i] = 1
            s = s - A[i]
        i = i - 1

    #print((W_inv*block)%M)
    #print(r.dot(A))

    # perumutation
    x = np.zeros(47, dtype = int)
    for i in range(len(pi)):
        x[pi[i]] = r[i]

    # binary to int
    x_str = ''
    for b in x:
        x_str += str(b)

    #print(x_str)
    x = int(x_str, 2)
    #print(x)

    # add padding
    if(len(str(x))%2 != 0):
        x = '0'+str(x)
    else:
        x = str(x)

    #print(x)

    part = []
    for i in range(len(x)):
        part.append(x[i])
        if len(part) == 2:
            plain += Matrix1[int(part[0])][int(part[1])]
            part = []

print(plain)
