# decrypt a LFSR cipher
# author: Xing Yu
# fall 2017

import sys
import re
import itertools
import numpy  as np
from collections import defaultdict

############################### check input parameters ###########################
'''
if len(sys.argv) != 2:
	print("usage: python3 delfsr.py [cipher file name]")
	sys.exit()

cipherfile = str(sys.argv[1])

m = 2

file = open(cipherfile, 'r')

text = file.read()

text = "".join(re.findall("[a-zA-Z]+", text))

file.close()
#print(text)

cipher = list(text)
'''
############################### calculate the coefficients ########################
frequent3letterwords = ['THE', 'AND', 'FOR', 'ARE', 'BUT', 'NOT', 'ALL', 'ANY', 'CAN', 'WAS', 'ONE', 'OUR', 'OUT', 'HAS', 'NEW', 'NOW', 'OLD', 'TWO', 'MAY', 'DID', 'ITS', 'LET','TOO', 'TOP', 'END']
frequent2letterwords = ['OF', 'TO', 'IN', 'IT', 'IS', 'BE', 'AS', 'AT', 'SO', 'WE', 'HE', 'BY', 'OR', 'ON', 'DO', 'IF', 'ME', 'MY', 'UP', 'AN', 'GO', 'NO', 'US', 'AM']
#keyguess = [6,16,22,2,5,15,6,8,22,12,20]
#keyguess = [6,16,22,2,18,14,16,8,22,12,20]
#keyguess = [6,14,10,16,4,14,4,8]
#keyguess = [6,16,22,2,4,8,16,8,22,12,20]
#cipherpart = "UFCJBDQM"
#cipherpart = "ZVOIXVIA"
#cipherpart = "QO FCD QJ ZVO"
#cipherpart = "FCDQJZVO"
#cipherpart = "SPWKYZXA"
#cipherpart = "YWZOVVSN"
#cipherpart = "VZQGAFOE"
#cipherpart = "IDCGIDQL"
#cipherpart = "ZUIXYNUX"
#cipherpart = "GSYBKNOP"
#cipherpart = "RCDZUGBN"

'''
for word1 in frequent3letterwords:
	for word2 in frequent3letterwords:
		#plain = "S" + word1 + word2 + "S"
		plain = word1 + "S" + word2 + "S"
		plain = list(plain)
		keyguess = []
		for i in range(len(list(cipherpart))):
			key = (ord(cipherpart[i]) - ord(plain[i]))%26
			keyguess.append(key)
'''
for word1 in frequent2letterwords:
	for word2 in frequent3letterwords:
		for word3 in frequent3letterwords:
		#plain = "S" + word1 + word2 + "S"
		#plain = word1 + "S" + word2 + "S"
			plain = word1 + word2 + word3
			plain = list(plain)
			keyguess = []
			for i in range(len(list(cipherpart))):
				key = (ord(cipherpart[i]) - ord(plain[i]))%26
				keyguess.append(key)

			temp = []
			for j in range(len(keyguess) - 3):
				b = []
				k = j
				while(k < j + 4 ):
					b.append(keyguess[k])
					k += 1
				temp.append(b)

			for k in range(len(temp)-4):
				t = np.array(temp[k]+temp[k+1]+temp[k+2]+temp[k+3])
				t = t.reshape(4,4)
				t = t.T
				tdet = np.linalg.det(t)
				tdet = round(tdet, 0)
				tdet = tdet%26

				for i in range(26):
					if (tdet*i)%26 ==1:
						tdetinv = i
						tinv = (tdetinv*(np.linalg.det(t))*(np.linalg.inv(t)))%26
						c = (tinv.dot(temp[k+4]))%26
						#cipher = "UFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						#cipher = "ZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						#cipher = 'FCDQJZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX'
						#cipher = "SPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						#cipher = "YWZOVVSNKEGPVEYXFRUWMONSDCUBSSZFAIRVROTAJOMHWNKLZEGLCHUMIXOLKCZBIOVMPACKLFJIXAQZKWXDIGGIDLGSPGZGXUICPODNKYNRSFUVPEJQTAZHCWBYROLSXKPMTURESCCMRUDSCSSXIAZVGVSQDCUPIBEOKTDYHMCBUUMOUCBMFTYZFSBGGINOFMOHAPPMEVMCRUSTLDDEBSTDSJHZTQJQDVIJZGKHITSZLEWTPQMBUWRQKMXDIQVWHACFECXYGZWKNEDNUIAVZWDOOUHIKZQMYQBVEDSNOERZQTWUYBKFZYXQVCFESQUZCVDTYTFKPUFWULZYMMRVSSLWUDEYKCFMUXOIOGWFGAACAMAMKWUNMEGNMCQHHOFWCJCCPQOFCDQJZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						#cipher = "VZQGAFOELYPIDCGIDQLZQAPEOCOADHRACOCMYBMSACUQTJKLCFBCXAGNJORCUGTIZUUCQUQTCWZWZGUXYZUEQAEVDMATFQSBKCFRPVGEDCGLPGOPGTNSZCNCOPOIQLGXSNCHZAVKDOHSKJYDSTZWWQIZEFJSEIWVENIWPLFYQHXSCZUMVOKLNGXUYAFWSIHOSDKYMZZAYJBEMRYYZBIEHEGGODDUVBCQHOXWNSGRDMBHAURWJSROVULIPITRINIQXJGRSNNONQKKDOVAMFFWDCOIXGWQVGGPOEFTCJWOKKTUIYROQJZVOIXCRMWGMGEHUGKJBENMMJXPIAJIPWMUKUGHIWANOBUBRGVTHWIYIDMAKGWKXEUYMVSZSGPJFUKMDHOYCQSPWORRGTVINNOAYCPQQDRARWXEPZWIHWDMULQHYDXOOLSFSWPUMGMQOGAVZKCJKEAOZXWSXKYEJKKTAYGDWPNSSDZSRBKRAALAYHBADPLPMJKAMVLYPLUBMOGEMXREXZKTXALVUZKYUDUPTSBKWUDSNYYOCTGHSKXIZUOOBIDCOGWWNSQWDFQKQPQJUJHUVCJPCFZYXHQHIYGBYPNKZXWCLZGQTCGJPZAANQDIZQGDURUPIGHHSCCIELJOVPKRSDAK1AE1SAAWXGFCJWDZHWMJXTIAINJAEDGJGSVKLHSYVEEPLZUAOBUHCCDOZDCQURYSXZSLVURJUGKAOJOIDJWLEENKZEWEUXMOUKUJKEBPURRSVRCPTUSMJEPYQXPBGBUPNYUFUQFFAOUXOHFOWXFXCNCTDWWXKIBPWOVZYKSJLUIWNGMFYEXAKKHCWJYOLLSMIHVCZCCZUIXYNUXGIEQPLFOKKGHJTEQGKNOMCAFVZMSAGICVRUXTVUXXWQLNIKRVQWSFUORUGOQDROSUIEPSBEMJQTNSHAPQOKHTWRZWHDQFQLFLWUKUXQEGKKDIWMTGJPOTVWKBWCQIVCBJEBXOKDKVIMJYJPXAWIVPLBLMUUTLTWYXRMXZWPOXOIWNKCVTWFJQRADKKOSHLEHDOHPCHEFUCLSJSHQMCLGURAEUWPNGIEUVYFYLOJUQQWGBNURPQTNWKIJXUKIAZOGSUNQODUUJHQGOCXSMWCBIORAJGPSYVHWLUOAPXOXWIDIWLLMEVQUPKNOSZMVAIDIZOQJWDSOKKHIBUTROTWAXWFOBDUHWKOOCXBEMYNADRIRGEJWETUBOCUIMQMFLYOKTIQOMDSNGYWBVKNSXEVKIVTPAPZUEGAUEMBAUMRZZGBVWSQMUOIXGPEJEZSXHFEROAPVHTQELGLZWOBCQVSYAADJCLMBZZDULGXYHEBMWDJQHGZGLOARSOTYUNYCJOOBTOMLUJESVDKYZEULGKPZQRKHJUAOJRYBUBBSXSKHUPXYBCAWGCVEMYAVIKWCGSHISTQFPWCFBQYLTWZEJGGZFUATNAWVNOQJGFYFTCOVHGKFOUJDCHOZIAGOTXCHMOCZMFQQJKNIKFELKPQZMICPSNCDTUJICWROSGTAKFPEFBMWJQNUSCXYRVAWDYVWCUQFULCVBOXGCHFUGVZDUCVNOQRPDQOHVCWGCDZCBLUHFGIFYTTCDBKLMJPQHVFQMPGPLPPGXOWDWWDAQOKISTKLMNKAGGNIJMSBEYGAPANGSYBKNOPKLQWYNRWWMHOFGXTNSJMVOZSROTOJQKSHCZAFVKONIVHSYTBSYDLSPTUWDJYOHLOVFMGFMMOCVTSLXUMUPVVUMQPVYKOGGXKPHAVMQWALBQYLTWOOWCLBSANXCHQBGSDSUAKMWWAMKJAORNOXGULQCOBPHIBGPESOVSEIYMNEOKMMOEEEGEZUSKWTYEAYKNEEMROWPVTQBWZXYJWFSIKEBQTYMYQSQHHCCZBOTOPSFHFWJIRKRKWOHYLNGEOKKKETSEYROCUSBFXQBWTQBQVHAWJEZVFQZQRFCNLCCCYFXWXFIRBCLZARKXYHRCDZUGBNXMRIAQSXMGUEHYQILAKMKRQWEHIPYIFUFMUWGDEBKEEQIWHEVWYUJJOFSCPWUJHMSCEKYAETCGESDQJOIDJWYLACJGBZXEDQGZDBGJEBAYWZOVVSNKEGPVEYXFRUWMONSDCUBSSZFAIRVROTAJOMHWNKLZEGLCHUMIXOLKCZBIOVMPACKLFJIXAQZKWXDIGGIDLGSPGZGXUICPODNKYNRSFUVPEJQTAZHCWBYROLSXKPMTURESCCMRUDSCSSXIAZVGVSQDCUPIBEOKTDYHMCBUUMOUCBMFTYZFSBGGINOFMOHAPPMEVMCRUSTLDDEBSTDSJHZTQJQDVIJZGKHITSZLEWTPQMBUWRQKMXDIQVWHACFECXYGZWKNEDNUIAVZWDOOUHIKZQMYQBVEDSNOERZQTWUYBKFZYXQVCFESQUZCVDTYTFKPUFWULZYMMRVSSLWUDEYKCFMUXOIOGWFGAACAMAMKWUNMEGNMCQHHOFWCJCCPQOFCDQJZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						#cipher = "IDCGIDQLZQAPEOCOADHRACOCMYBMSACUQTJKLCFBCXAGNJORCUGTIZUUCQUQTCWZWZGUXYZUEQAEVDMATFQSBKCFRPVGEDCGLPGOPGTNSZCNCOPOIQLGXSNCHZAVKDOHSKJYDSTZWWQIZEFJSEIWVENIWPLFYQHXSCZUMVOKLNGXUYAFWSIHOSDKYMZZAYJBEMRYYZBIEHEGGODDUVBCQHOXWNSGRDMBHAURWJSROVULIPITRINIQXJGRSNNONQKKDOVAMFFWDCOIXGWQVGGPOEFTCJWOKKTUIYROQJZVOIXCRMWGMGEHUGKJBENMMJXPIAJIPWMUKUGHIWANOBUBRGVTHWIYIDMAKGWKXEUYMVSZSGPJFUKMDHOYCQSPWORRGTVINNOAYCPQQDRARWXEPZWIHWDMULQHYDXOOLSFSWPUMGMQOGAVZKCJKEAOZXWSXKYEJKKTAYGDWPNSSDZSRBKRAALAYHBADPLPMJKAMVLYPLUBMOGEMXREXZKTXALVUZKYUDUPTSBKWUDSNYYOCTGHSKXIZUOOBIDCOGWWNSQWDFQKQPQJUJHUVCJPCFZYXHQHIYGBYPNKZXWCLZGQTCGJPZAANQDIZQGDURUPIGHHSCCIELJOVPKRSDAK1AE1SAAWXGFCJWDZHWMJXTIAINJAEDGJGSVKLHSYVEEPLZUAOBUHCCDOZDCQURYSXZSLVURJUGKAOJOIDJWLEENKZEWEUXMOUKUJKEBPURRSVRCPTUSMJEPYQXPBGBUPNYUFUQFFAOUXOHFOWXFXCNCTDWWXKIBPWOVZYKSJLUIWNGMFYEXAKKHCWJYOLLSMIHVCZCCZUIXYNUXGIEQPLFOKKGHJTEQGKNOMCAFVZMSAGICVRUXTVUXXWQLNIKRVQWSFUORUGOQDROSUIEPSBEMJQTNSHAPQOKHTWRZWHDQFQLFLWUKUXQEGKKDIWMTGJPOTVWKBWCQIVCBJEBXOKDKVIMJYJPXAWIVPLBLMUUTLTWYXRMXZWPOXOIWNKCVTWFJQRADKKOSHLEHDOHPCHEFUCLSJSHQMCLGURAEUWPNGIEUVYFYLOJUQQWGBNURPQTNWKIJXUKIAZOGSUNQODUUJHQGOCXSMWCBIORAJGPSYVHWLUOAPXOXWIDIWLLMEVQUPKNOSZMVAIDIZOQJWDSOKKHIBUTROTWAXWFOBDUHWKOOCXBEMYNADRIRGEJWETUBOCUIMQMFLYOKTIQOMDSNGYWBVKNSXEVKIVTPAPZUEGAUEMBAUMRZZGBVWSQMUOIXGPEJEZSXHFEROAPVHTQELGLZWOBCQVSYAADJCLMBZZDULGXYHEBMWDJQHGZGLOARSOTYUNYCJOOBTOMLUJESVDKYZEULGKPZQRKHJUAOJRYBUBBSXSKHUPXYBCAWGCVEMYAVIKWCGSHISTQFPWCFBQYLTWZEJGGZFUATNAWVNOQJGFYFTCOVHGKFOUJDCHOZIAGOTXCHMOCZMFQQJKNIKFELKPQZMICPSNCDTUJICWROSGTAKFPEFBMWJQNUSCXYRVAWDYVWCUQFULCVBOXGCHFUGVZDUCVNOQRPDQOHVCWGCDZCBLUHFGIFYTTCDBKLMJPQHVFQMPGPLPPGXOWDWWDAQOKISTKLMNKAGGNIJMSBEYGAPANGSYBKNOPKLQWYNRWWMHOFGXTNSJMVOZSROTOJQKSHCZAFVKONIVHSYTBSYDLSPTUWDJYOHLOVFMGFMMOCVTSLXUMUPVVUMQPVYKOGGXKPHAVMQWALBQYLTWOOWCLBSANXCHQBGSDSUAKMWWAMKJAORNOXGULQCOBPHIBGPESOVSEIYMNEOKMMOEEEGEZUSKWTYEAYKNEEMROWPVTQBWZXYJWFSIKEBQTYMYQSQHHCCZBOTOPSFHFWJIRKRKWOHYLNGEOKKKETSEYROCUSBFXQBWTQBQVHAWJEZVFQZQRFCNLCCCYFXWXFIRBCLZARKXYHRCDZUGBNXMRIAQSXMGUEHYQILAKMKRQWEHIPYIFUFMUWGDEBKEEQIWHEVWYUJJOFSCPWUJHMSCEKYAETCGESDQJOIDJWYLACJGBZXEDQGZDBGJEBAYWZOVVSNKEGPVEYXFRUWMONSDCUBSSZFAIRVROTAJOMHWNKLZEGLCHUMIXOLKCZBIOVMPACKLFJIXAQZKWXDIGGIDLGSPGZGXUICPODNKYNRSFUVPEJQTAZHCWBYROLSXKPMTURESCCMRUDSCSSXIAZVGVSQDCUPIBEOKTDYHMCBUUMOUCBMFTYZFSBGGINOFMOHAPPMEVMCRUSTLDDEBSTDSJHZTQJQDVIJZGKHITSZLEWTPQMBUWRQKMXDIQVWHACFECXYGZWKNEDNUIAVZWDOOUHIKZQMYQBVEDSNOERZQTWUYBKFZYXQVCFESQUZCVDTYTFKPUFWULZYMMRVSSLWUDEYKCFMUXOIOGWFGAACAMAMKWUNMEGNMCQHHOFWCJCCPQOFCDQJZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						#cipher = "ZUIXYNUXGIEQPLFOKKGHJTEQGKNOMCAFVZMSAGICVRUXTVUXXWQLNIKRVQWSFUORUGOQDROSUIEPSBEMJQTNSHAPQOKHTWRZWHDQFQLFLWUKUXQEGKKDIWMTGJPOTVWKBWCQIVCBJEBXOKDKVIMJYJPXAWIVPLBLMUUTLTWYXRMXZWPOXOIWNKCVTWFJQRADKKOSHLEHDOHPCHEFUCLSJSHQMCLGURAEUWPNGIEUVYFYLOJUQQWGBNURPQTNWKIJXUKIAZOGSUNQODUUJHQGOCXSMWCBIORAJGPSYVHWLUOAPXOXWIDIWLLMEVQUPKNOSZMVAIDIZOQJWDSOKKHIBUTROTWAXWFOBDUHWKOOCXBEMYNADRIRGEJWETUBOCUIMQMFLYOKTIQOMDSNGYWBVKNSXEVKIVTPAPZUEGAUEMBAUMRZZGBVWSQMUOIXGPEJEZSXHFEROAPVHTQELGLZWOBCQVSYAADJCLMBZZDULGXYHEBMWDJQHGZGLOARSOTYUNYCJOOBTOMLUJESVDKYZEULGKPZQRKHJUAOJRYBUBBSXSKHUPXYBCAWGCVEMYAVIKWCGSHISTQFPWCFBQYLTWZEJGGZFUATNAWVNOQJGFYFTCOVHGKFOUJDCHOZIAGOTXCHMOCZMFQQJKNIKFELKPQZMICPSNCDTUJICWROSGTAKFPEFBMWJQNUSCXYRVAWDYVWCUQFULCVBOXGCHFUGVZDUCVNOQRPDQOHVCWGCDZCBLUHFGIFYTTCDBKLMJPQHVFQMPGPLPPGXOWDWWDAQOKISTKLMNKAGGNIJMSBEYGAPANGSYBKNOPKLQWYNRWWMHOFGXTNSJMVOZSROTOJQKSHCZAFVKONIVHSYTBSYDLSPTUWDJYOHLOVFMGFMMOCVTSLXUMUPVVUMQPVYKOGGXKPHAVMQWALBQYLTWOOWCLBSANXCHQBGSDSUAKMWWAMKJAORNOXGULQCOBPHIBGPESOVSEIYMNEOKMMOEEEGEZUSKWTYEAYKNEEMROWPVTQBWZXYJWFSIKEBQTYMYQSQHHCCZBOTOPSFHFWJIRKRKWOHYLNGEOKKKETSEYROCUSBFXQBWTQBQVHAWJEZVFQZQRFCNLCCCYFXWXFIRBCLZARKXYHRCDZUGBNXMRIAQSXMGUEHYQILAKMKRQWEHIPYIFUFMUWGDEBKEEQIWH1/10EVWYUJJOFSCPWUJHMSCEKYAETCGESDQJOIDJWYLACJGBZXEDQGZDBGJEBAYWZOVVSNKEGPVEYXFRUWMONSDCUBSSZFAIRVROTAJOMHWNKLZEGLCHUMIXOLKCZBIOVMPACKLFJIXAQZKWXDIGGIDLGSPGZGXUICPODNKYNRSFUVPEJQTAZHCWBYROLSXKPMTURESCCMRUDSCSSXIAZVGVSQDCUPIBEOKTDYHMCBUUMOUCBMFTYZFSBGGINOFMOHAPPMEVMCRUSTLDDEBSTDSJHZTQJQDVIJZGKHITSZLEWTPQMBUWRQKMXDIQVWHACFECXYGZWKNEDNUIAVZWDOOUHIKZQMYQBVEDSNOERZQTWUYBKFZYXQVCFESQUZCVDTYTFKPUFWULZYMMRVSSLWUDEYKCFMUXOIOGWFGAACAMAMKWUNMEGNMCQHHOFWCJCCPQOFCDQJZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						#cipher = "GSYBKNOPKLQWYNRWWMHOFGXTNSJMVOZSROTOJQKSHCZAFVKONIVHSYTBSYDLSPTUWDJYOHLOVFMGFMMOCVTSLXUMUPVVUMQPVYKOGGXKPHAVMQWALBQYLTWOOWCLBSANXCHQBGSDSUAKMWWAMKJAORNOXGULQCOBPHIBGPESOVSEIYMNEOKMMOEEEGEZUSKWTYEAYKNEEMROWPVTQBWZXYJWFSIKEBQTYMYQSQHHCCZBOTOPSFHFWJIRKRKWOHYLNGEOKKKETSEYROCUSBFXQBWTQBQVHAWJEZVFQZQRFCNLCCCYFXWXFIRBCLZARKXYHRCDZUGBNXMRIAQSXMGUEHYQILAKMKRQWEHIPYIFUFMUWGDEBKEEQIWH1/10EVWYUJJOFSCPWUJHMSCEKYAETCGESDQJOIDJWYLACJGBZXEDQGZDBGJEBAYWZOVVSNKEGPVEYXFRUWMONSDCUBSSZFAIRVROTAJOMHWNKLZEGLCHUMIXOLKCZBIOVMPACKLFJIXAQZKWXDIGGIDLGSPGZGXUICPODNKYNRSFUVPEJQTAZHCWBYROLSXKPMTURESCCMRUDSCSSXIAZVGVSQDCUPIBEOKTDYHMCBUUMOUCBMFTYZFSBGGINOFMOHAPPMEVMCRUSTLDDEBSTDSJHZTQJQDVIJZGKHITSZLEWTPQMBUWRQKMXDIQVWHACFECXYGZWKNEDNUIAVZWDOOUHIKZQMYQBVEDSNOERZQTWUYBKFZYXQVCFESQUZCVDTYTFKPUFWULZYMMRVSSLWUDEYKCFMUXOIOGWFGAACAMAMKWUNMEGNMCQHHOFWCJCCPQOFCDQJZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						cipher = "RCDZUGBNXMRIAQSXMGUEHYQILAKMKRQWEHIPYIFUFMUWGDEBKEEQIWHEVWYUJJOFSCPWUJHMSCEKYAETCGESDQJOIDJWYLACJGBZXEDQGZDBGJEBAYWZOVVSNKEGPVEYXFRUWMONSDCUBSSZFAIRVROTAJOMHWNKLZEGLCHUMIXOLKCZBIOVMPACKLFJIXAQZKWXDIGGIDLGSPGZGXUICPODNKYNRSFUVPEJQTAZHCWBYROLSXKPMTURESCCMRUDSCSSXIAZVGVSQDCUPIBEOKTDYHMCBUUMOUCBMFTYZFSBGGINOFMOHAPPMEVMCRUSTLDDEBSTDSJHZTQJQDVIJZGKHITSZLEWTPQMBUWRQKMXDIQVWHACFECXYGZWKNEDNUIAVZWDOOUHIKZQMYQBVEDSNOERZQTWUYBKFZYXQVCFESQUZCVDTYTFKPUFWULZYMMRVSSLWUDEYKCFMUXOIOGWFGAACAMAMKWUNMEGNMCQHHOFWCJCCPQOFCDQJZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
						cipher = list(cipher)

						keystream = []
						currentstate = []
						for k in range(4):
							keystream.append(keyguess[k])
							currentstate.append(keyguess[k])

						while(len(keystream) < len(cipher)):
							#print(c)
							#print(np.asarray(currentstate))
							newkey = c.dot(np.asarray(currentstate))
							newkey = newkey%26
							keystream.append(round(newkey,0))
							currentstate.pop(0)
							currentstate.append(round(newkey,0)) 

						plain = []

						for m in range(len(cipher)):
							j = (ord(cipher[m]) - ord('A') - int(keystream[m]))%26
							j = j+ ord('a')
							plain.append(chr(j))

						#print(keystream)
						plain = ''.join(plain)
						if plain.find('the') != -1:
							print(plain)
					else:
						continue			
'''
		temp = []
		for j in range(len(keyguess) - 3):
			b = []
			k = j
			while(k < j + 4 ):
				b.append(keyguess[k])
				k += 1
			temp.append(b)

		for k in range(len(temp)-4):
			t = np.array(temp[k]+temp[k+1]+temp[k+2]+temp[k+3])
			t = t.reshape(4,4)
			t = t.T
			tdet = np.linalg.det(t)
			tdet = round(tdet, 0)
			tdet = tdet%26

			for i in range(26):
				if (tdet*i)%26 ==1:
					tdetinv = i
					tinv = (tdetinv*(np.linalg.det(t))*(np.linalg.inv(t)))%26
					c = (tinv.dot(temp[k+4]))%26
					#cipher = "UFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
					cipher = "ZVOIXVIASEZIJGBFUBXEHXMAWBLIJZQJSCZLNMXSPWKYZXAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
					cipher = list(cipher)

					keystream = []
					currentstate = []
					for k in range(4):
						keystream.append(keyguess[k])
						currentstate.append(keyguess[k])

					while(len(keystream) < len(cipher)):
						#print(c)
						#print(np.asarray(currentstate))
						newkey = c.dot(np.asarray(currentstate))
						newkey = newkey%26
						keystream.append(round(newkey,0))
						currentstate.pop(0)
						currentstate.append(round(newkey,0)) 

					plain = []

					for m in range(len(cipher)):
						j = (ord(cipher[m]) - ord('A') - int(keystream[m]))%26
						j = j+ ord('a')
						plain.append(chr(j))

					#print(keystream)
					print(''.join(plain))
				else:
					continue

#cipher = "XAUFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
cipher = "UFCJBDQMXKLBWOOCGEKYGOIRUGURIMLYMSHIIIPYGVZGTIEBPUNECTSDGXIOFBCDIDBSBBBMLHSSZXOOAQCQQCJXHTYFKKCTFYVVKJDURMOYJTWQQAQNBOQINJSX"
cipher = list(cipher)

#c = np.array([3,13,13,9])
#initkey = [16,22,2,5]

c = np.array([6,16,6,10])

keystream = [22,2,5,15]
currentstate = [22,2,5,15]

while(len(keystream) < len(cipher)):
	print(c)
	print(np.asarray(currentstate))
	newkey = c.dot(np.asarray(currentstate))
	newkey = newkey%26
	keystream.append(newkey)
	currentstate.pop(0)
	currentstate.append(newkey) 

plain = []

for i in range(len(cipher)):
	j = (ord(cipher[i]) - ord('A') - keystream[i])%26
	j = j+ ord('a')
	plain.append(chr(j))

print(keystream)
print(''.join(plain))

'''
